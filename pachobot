#!/usr/bin/env python

import mailbox, sys
from subprocess import Popen, PIPE

from optparse import OptionParser

parser = OptionParser()
parser.add_option("-f", "--mailbox", help="Specify which mailbox to load")
parser.add_option("--dry-run", help="Don't apply and push patches", default=False, action="store_true")

(options, args) = parser.parse_args()

if not options.dry_run and Popen(["git", "fetch", "origin"]).wait():
	sys.exit(1)

mbox = mailbox.Maildir(options.mailbox, factory=mailbox.MaildirMessage)
mlist = {}
for k in mbox.keys():
	m = mbox.get_message(k)
	if 'S' in m.get_flags():
		continue;
	if not m.get('References'):
		mlist[m['message-id']] = [k]

for k in mbox.keys():
	m = mbox.get_message(k)
	if 'S' in m.get_flags():
		continue;
	if m.get('References'):
		for r in m['References'].split():
			if r in mlist:
				mlist[r].append(k)
				break
	if not options.dry_run:
		m.add_flag('S')
		mbox[k] = m

for r in mlist:
	print "-------------", r
	if not options.dry_run:
		if Popen(["git", "checkout", "origin/criu-dev"]).wait():
			sys.exit(1)
		Popen(["git", "clean", "-dxf"]).wait()
	mlist[r].sort(lambda a,b: cmp(mbox.get(a)['subject'].split(), mbox.get(b)['subject'].split()))
	i = 0;
	for k in mlist[r]:
		f = mbox.get_file(k)
		devnull = open("/dev/null", "w+")
		m = mbox[k]
		p = Popen(["git", "apply", "--stat", "-"], stdin = PIPE, stdout = devnull, stderr = devnull)
		p.stdin.write(f.read())
		p.stdin.close()
		if p.wait() != 0:
			print "Skip\t", m['Subject']
			continue

		print "Apply\t", m['Subject']
		i += 1;
		if options.dry_run:
			continue

		f = mbox.get_file(k)
		m.add_flag('P')
		p = Popen(["git", "am", "-m", "-"], stdin = PIPE)
		p.stdin.write(f.read())
		p.stdin.close()
		if p.wait() != 0:
			Popen(["git", "am", "--abort"]).wait()
			mbox[k] = m
			break;
		m.add_flag('R')
		mbox[k] = m
	else:
		if i == 0:
			continue
		print "Push\t", k
		if options.dry_run:
			continue
		if Popen(["git", "branch", k]).wait() != 0:
			continue;
		if Popen(["git", "push", "avagin", k]).wait() != 0:
			continue;
